[{"/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/index.js":"1","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/App.js":"2","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/serviceWorker.js":"3","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/editSensor.js":"4","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/view.js":"5","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/sensorsList.js":"6","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/protectedRoute.js":"7","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/navigation.js":"8","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/auth/login.js":"9","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/auth/myAccount.js":"10"},{"size":637,"mtime":1612874142428,"results":"11","hashOfConfig":"12"},{"size":1689,"mtime":1612890644153,"results":"13","hashOfConfig":"12"},{"size":4951,"mtime":1612870322070,"results":"14","hashOfConfig":"12"},{"size":5126,"mtime":1612870322059,"results":"15","hashOfConfig":"12"},{"size":2673,"mtime":1612870322065,"results":"16","hashOfConfig":"12"},{"size":3092,"mtime":1612885181330,"results":"17","hashOfConfig":"12"},{"size":530,"mtime":1612870322063,"results":"18","hashOfConfig":"12"},{"size":1211,"mtime":1612890651495,"results":"19","hashOfConfig":"12"},{"size":2756,"mtime":1612885889542,"results":"20","hashOfConfig":"12"},{"size":1145,"mtime":1612884068832,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"tg6u3u",{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/index.js",[],["46","47"],"/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/App.js",["48","49","50"],"/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/serviceWorker.js",[],"/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/editSensor.js",["51"],"import React, { Component } from \"react\";\nimport { Form, Button, Alert } from 'react-bootstrap'\nimport axios from 'axios';\n\nexport default class EditSensor extends Component {\n\n  constructor(props) {\n    super(props)\n\n\n    this.onChangeSensorName = this.onChangeSensorName.bind(this);\n    this.onChangeSensorType = this.onChangeSensorType.bind(this);\n    this.onChangeSensorSnowDepthLimit = this.onChangeSensorSnowDepthLimit.bind(this);\n    this.onChangeSensorBaseValue = this.onChangeSensorBaseValue.bind(this)\n    this.onChangeSensorComment = this.onChangeSensorComment.bind(this)\n    this.onChangeSensorAdminStatus = this.onChangeSensorAdminStatus.bind(this)\n    this.onSubmit = this.onSubmit.bind(this);\n\n    // State\n    this.state = {\n      // id: '',\n      name: '',\n      type: '',\n      snowDepthLimit: '',\n      baseValue: '',\n      comment: '',\n      adminStatus: '',\n      message: '',\n      loading: false\n    }\n  }\n\n  componentDidMount() {\n    // console.log(this.props)\n    axios.get('/sensors/' + this.props.match.params.id)\n\n      .then(res => {\n        console.log(res.data)\n        this.setState({\n          // id: res.data.id, \n          name: res.data.name,\n          type: res.data.type,\n          snowDepthLimit: res.data.snowDepthLimit,\n          baseValue: res.data.baseValue,\n          comment: res.data.comment,\n          adminStatus: res.data.adminStatus\n        });\n\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n  }\n\n  onChangeSensorName(e) {\n    this.setState({ name: e.target.value })\n  }\n\n  onChangeSensorType(e) {\n    this.setState({ type: e.target.value })\n  }\n\n  onChangeSensorSnowDepthLimit(e) {\n    this.setState({ snowDepthLimit: e.target.value })\n  }\n\n  onChangeSensorBaseValue(e) {\n    this.setState({ baseValue: e.target.value })\n  }\n\n  onChangeSensorComment(e) {\n    this.setState({ comment: e.target.value })\n  }\n\n  onChangeSensorAdminStatus(e) {\n    this.setState({ adminStatus: e.target.value })\n  }\n\n  onSubmit(e) {\n\n    try {\n      const sensorObject = {\n        // id: this.state.id,\n        name: this.state.name,\n        type: this.state.type,\n        snowDepthLimit: this.state.snowDepthLimit,\n        baseValue: this.state.baseValue,\n        comment: this.state.comment,\n        adminStatus: this.state.adminStatus\n      };\n\n      const item = {\n        id: this.state.id,\n        name: this.state.name,\n        snowDepth: 0,\n        time:0\n      };\n\n      this.setState({\n        message: 'Sensor Successfully Updated',\n        loading: true\n      })\n\n      axios.put('/sensors/' + this.props.match.params.id, sensorObject)\n        .then((res) => {\n          console.log(res)\n          console.log('Sensor successfully updated')\n        }).catch((error) => {\n          console.log(error)\n        })\n\n        // axios.post('/view/sendEmail/' + this.props.match.params.id, item)\n        // .then((res) => {\n        //   console.log(res)\n        //   console.log('Send email')\n        // }).catch((error) => {\n        //   console.log(error)\n        // })\n\n      // Redirect to Sensor List \n      this.props.history.push('/sensors-list')\n      e.preventDefault()\n    } catch {\n      this.setState({ message: 'Error: Sensor is not Updated' })\n    }\n    this.setState({ loading: false })\n\n  }\n\n\n  render() {\n    return (<div className=\"form-wrapper\">\n       <h2 className='text-center mb-4'>Update Sensor</h2>\n      {this.state.message && <Alert variant='danger'>{this.state.message}</Alert>}\n      <Form onSubmit={this.onSubmit}>\n        {/* <Form.Group controlId=\"Name\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control type=\"text\" value={this.state.name} onChange={this.onChangeSensorName} required />\n        </Form.Group>\n\n        <Form.Group controlId=\"Type\">\n          <Form.Label>Type</Form.Label>\n          <Form.Control type=\"text\" value={this.state.type} onChange={this.onChangeSensorType} required />\n        </Form.Group> */}\n\n        {/* <Form.Group controlId=\"SnowDepthLimit\">\n          <Form.Label>SnowDepthLimit</Form.Label>\n          <Form.Control type=\"text\" value={this.state.snowDepthLimit} onChange={this.onChangeSensorSnowDepthLimit} required />\n        </Form.Group>\n\n        <Form.Group controlId=\"BaseValue\">\n          <Form.Label>BaseValue</Form.Label>\n          <Form.Control type=\"text\" value={this.state.baseValue} onChange={this.onChangeSensorBaseValue} required />\n        </Form.Group> */}\n\n        <Form.Group controlId=\"Comment\">\n          <Form.Label>Comment</Form.Label>\n          <Form.Control type=\"text\" value={this.state.comment} onChange={this.onChangeSensorComment} required />\n        </Form.Group>\n\n        <Form.Group controlId=\"AdminStatus\">\n          <Form.Label>Status</Form.Label>\n          <Form.Control as=\"select\" value={this.state.adminStatus} onChange={this.onChangeSensorAdminStatus}>\n          <option></option>\n          <option>Opened</option>\n          <option>Closed</option>\n            </Form.Control> \n        </Form.Group>\n\n        <Button variant=\"danger\" size=\"lg\" block=\"block\" type=\"submit\">\n          Update Sensor\n        </Button>\n      </Form>\n    </div>);\n  }\n}\n","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/view.js",["52"],"import React, { Component } from \"react\";\n// import {Link} from 'react-router-dom'\nimport axios from 'axios';\n// import Table from 'react-bootstrap/Table';\n// import sensorTableRow from './sensorTableRow';\n\n\nclass View extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      view: []\n    };\n  }\n\n  \n  componentDidMount() {\n    fetch(\"/view\")\n      .then(res => res.json())\n      .then(\n        (data) => {\n            console.log(data)\n          this.setState({\n            isLoaded: true,\n            view: data,\n            \n          });\n        },\n        \n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  // componentDidUpdate() {\n  //   fetch(\"/view\")\n  //     .then(res => res.json())\n  //     .then(\n  //       (data) => {\n  //           console.log(data)\n            \n  //         this.setState({\n  //           isLoaded: true,\n  //           view: data,\n            \n  //         });\n  //       },\n        \n  //       (error) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           error\n  //         });\n  //       }\n  //     )\n  // }\n\n \n\n  render() {\n    const { error, isLoaded, view } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n      <>\n        <h2>Senors Summary</h2> \n        <div style={{overflowX:\"auto\"}}> \n        {view.length > 0 &&\n        <table id='sensorsList' className=\"table table-striped table-borderless\">\n          <thead className=\"thead-light\">\n            <tr>\n              \n            <th>Status</th>\n            <th>Idrottsplats</th>\n            <th>Plan</th>\n            <th>Snödjup</th>\n            <th>Comment</th>\n            <th>Temperature</th>\n            </tr>\n          </thead>\n          <tbody>\n          {view.map(item => (\n                  <tr key={item.Id}>\n                      {item.Status === 'Opened' &&\n                      <td className = 'opened'>{item.Status}</td>}\n                       {item.Status === 'Closed' &&\n                      <td className = 'closed'>{item.Status}</td>}\n                    <td>{item.Name}</td>\n              <td>{item.Type}</td>\n              <td>{item.SnowDepth+\"mm\"}</td>\n              <td>{item.Comment}</td>\n              <td>{item.Temperature}</td>\n              \n              \n                  </tr>\n                ))}\n          \n          </tbody>\n        </table>\n    }\n        </div>\n        \n       </>\n       \n      );\n    }\n  }\n}\n \n\n\nexport default View;\n","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/sensorsList.js",[],"/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/protectedRoute.js",["53","54"],"import React from 'react'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\n\nfunction privateRoute({ component: Component, ...rest }) {\n\n  let isLogin = true\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        isLogin ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default privateRoute","/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/components/navigation.js",[],"/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/auth/login.js",["55"],"/Users/sdonose/Desktop/pr/snowdepth-auth/client/src/auth/myAccount.js",["56"],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":9,"column":50,"nodeType":"63","messageId":"64","endLine":9,"endColumn":54},{"ruleId":"61","severity":1,"message":"65","line":17,"column":8,"nodeType":"63","messageId":"64","endLine":17,"endColumn":22},{"ruleId":"61","severity":1,"message":"66","line":18,"column":8,"nodeType":"63","messageId":"64","endLine":18,"endColumn":13},{"ruleId":"61","severity":1,"message":"67","line":92,"column":13,"nodeType":"63","messageId":"64","endLine":92,"endColumn":17},{"ruleId":"61","severity":1,"message":"66","line":3,"column":8,"nodeType":"63","messageId":"64","endLine":3,"endColumn":13},{"ruleId":"61","severity":1,"message":"68","line":2,"column":27,"nodeType":"63","messageId":"64","endLine":2,"endColumn":33},{"ruleId":"61","severity":1,"message":"69","line":2,"column":35,"nodeType":"63","messageId":"64","endLine":2,"endColumn":41},{"ruleId":"61","severity":1,"message":"70","line":9,"column":11,"nodeType":"63","messageId":"64","endLine":9,"endColumn":18},{"ruleId":"61","severity":1,"message":"70","line":10,"column":10,"nodeType":"63","messageId":"64","endLine":10,"endColumn":17},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'ProtectedRoute' is defined but never used.","'axios' is defined but never used.","'item' is assigned a value but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'cookies' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]